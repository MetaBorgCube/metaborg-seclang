module func

imports

  base
  env
  stmt

rules

  funDeclOk: Env * Fun
  funDeclsOk maps funDeclOk(*, list(*))
  
  funDeclOk(ENV, Fun(T, x, args, ss)) :- {T_fun ENV'}
    funTypeOk(ENV, x, T, args) == ENV',
    stmtsOk(ENV', ss) == _.
    
rules

  funTypeOk: Env * FunName * LType * FunArgs -> Env
  funArgOk: Env * FunArg -> LTYPE
  funArgsOk maps funArgOk(*, list(*)) = list(*)
  
  funTypeOk(ENV, x, lt_ret, FunArgs(args)) = ENV' :- {LT_args LT_ret}
    new ENV', ENV' -P-> ENV,
    ltypeOfLType(lt_ret) == LT_ret,
    !fun[x, FUNTYPE(LT_args, LT_ret)] in ENV,
    !return[LT_ret] in ENV',
    funArgsOk(ENV', args) == LT_args.

  funArgOk(ENV, Arg(lt, x)) = LT :-
    !var[x, LT@ltypeOfLType(lt)] in ENV.
