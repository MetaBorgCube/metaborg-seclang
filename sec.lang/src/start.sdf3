module start

context-free start-symbols

  Start

context-free sorts

  Start 

  Funs Fun FunName FunArgs FunArg
  
  Stmts Stmt

  Expr Args Arg
  
  Literal Identifier

  BinOp UnOp

context-free syntax

  Start.Program = <
    <Funs>
    <Stmts>
  >

  // Functions
  Funs.Funs = <<{Fun ";\n"}*>>
  
  Fun.Fun = <fun <Type> <FunName>(<FunArgs>) {
    <Stmts>
  }>
  FunArgs.FunArgs     = <<{FunArg ","}*>>
  FunArg.Arg          = <<Type> <Identifier>>
  FunName             = ID

  // Statements
  Stmts.Stmts         = <<{Stmt ";\n"}*>>
  
  Stmt.AssignExpr     = <<Identifier> := <Expr>>
  Stmt.NewArray       = <<Identifier> := arnew <Expr>>
  // FIXME : Add Production for ReadArray Construct
  Stmt.WriteArray     = <arwrite <Identifier> <Expr> <Expr>>
  Stmt.AssingFunCall  = <<Identifier> := <FunName>(<Args>)>
  Stmt.Return         = <return <Expr>>
  Stmt.IfThenElse     = <if <Expr> {
    <Stmts>
  } else {
    <Stmts>
  }>
  Stmt.While          = <while <Expr> {
    <Stmts>
  }>

  Args.Args = <<{Expr ","}*>>

  // Expressions
  Expr                = <(<Expr>)> {bracket}
  
  Expr.Ident          = Identifier
  Expr.Literal        = Literal
  Expr.BinExpr        = <<Expr> <BinOp> <Expr>> {left}
  Expr.UnExpr		  = <<UnOp> <Expr>>
  // FIXME: Add Production for Array Length Expressions

  // Operators
  BinOp.Plus          = <+>
  BinOp.Minus         = <->
  BinOp.Divide        = </>
  BinOp.Times         = <*>
  BinOp.And           = <&&>
  BinOp.Or            = <||>
  BinOp.Eq            = <==>
  BinOp.Lt            = <\<>
  BinOp.Gt            = <\>>

  UnOp.Min            = <->
  UnOp.Neg            = <!>

  // Literals & Identifiers
  Literal.Number      = INT
  // FIXME: Add Production for `true` Literal
  Literal.False       = <false>

  Identifier.Id       = ID

context-free priorities

  Expr.UnExpr  >
  Expr.BinExpr

context-free sorts

  Type

context-free syntax

  Type.IntT   = <int>
  Type.BoolT  = <bool>
  Type.ArrayT = <<Type>[]>

lexical sorts

  ID INT

lexical syntax

  ID  = [a-zA-Z] [a-zA-Z0-9\_]*
  INT = [1-9] [0-9]*

  LAYOUT = [\ \n\t\v\f\r]

context-free restrictions

  ID  -/- [a-zA-Z0-9\_]
  INT -/- [0-9]

  LAYOUT? -/- [\ \n\t\v\f\r]

template options

  ID = keyword {reject}
  