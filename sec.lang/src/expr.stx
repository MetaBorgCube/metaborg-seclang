module expr

imports

  signatures/start-sig

  base
  env

rules

  typeOfExpr: Env * Expr -> TYPE                  // Γ ⊢ 𝑒 ∶ 𝑇    (judgment form, start 5.2)

rules // Boolean Expressions

  // FIXME: Add rule for `True()`.
  typeOfExpr(_, Literal(False()))   = BOOL().     // Γ ⊢ false ∶ Bool

  typeOfExpr(ENV, UnExpr(Neg(), e)) = BOOL() :-   // Γ ⊢ !𝑒 ∶Bool
    typeOfExpr(ENV, e) == BOOL().                 // Γ ⊢ 𝑒 ∶ Bool  (premise)

  // Binary operations defined below

rules  // Numerical Expressions

  typeOfExpr(_, Literal(Number(_))) = INT().

  typeOfExpr(ENV, UnExpr(Min(), e)) = INT() :-
    typeOfExpr(ENV, e) == INT().

  // Binary operations defined below

rules // Identifiers

  typeOfExpr(ENV, Ident(x)) = T :-               // Γ ⊢ 𝑥 ∶ 𝑇
    get(ENV, x) == T.                            // get(Γ, 𝑥) = 𝑇

rules // Array length

  // FIXME: Add Typing Rule for Array length:
  //    get(Γ, 𝑥) = 𝑇[]
  // ---------------------
  //   Γ ⊢ arlen 𝑥 ∶ Int

rules // Binary Operations

  typeOfBinOp : BinOp * TYPE * TYPE -> TYPE

  // generic rule for binary operations
  typeOfExpr(ENV, BinExpr(e1, op, e2)) = T :- {T1 T2}
    typeOfExpr(ENV, e1) == T1,
    typeOfExpr(ENV, e2) == T2,
    typeOfBinOp(op, T1, T2) == T.

  // Boolean Operations
  typeOfBinOp(And(), BOOL(), BOOL()) = BOOL().
  typeOfBinOp(Or() , BOOL(), BOOL()) = BOOL().
  typeOfBinOp(Eq() , BOOL(), BOOL()) = BOOL().


  // Arithmetic Operations
  typeOfBinOp(Plus()  , INT(), INT()) = INT().
  typeOfBinOp(Minus() , INT(), INT()) = INT().
  typeOfBinOp(Divide(), INT(), INT()) = INT().
  typeOfBinOp(Times() , INT(), INT()) = INT().


  // Comparison Operations
  typeOfBinOp(Eq(), INT(), INT()) = BOOL().
  typeOfBinOp(Lt(), INT(), INT()) = BOOL().
  typeOfBinOp(Gt(), INT(), INT()) = BOOL().

