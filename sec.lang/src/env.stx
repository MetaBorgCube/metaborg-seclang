module env

imports
  base
  sec

signature
  sorts Env = scope

rules

  lookupVar: Env * Identifier -> VAR_LIST
  get: Env * Identifier -> LTYPE
  
  lookupVar(ENV, x) = R :-
    query var 
      filter P*
      and { x' :- x' == x }
      in ENV |-> R.

  get(env, x) = T :- {x'}
    lookupVar(env, x) == [(_, (x', T))],
    @x.ref  := x',
    @x.type := T.

  update: Env * Identifier * LTYPE -> Env
  insertIfNew: Env * Identifier * LTYPE * VAR_LIST -> Env
  eraseLowSec: LTYPE -> LTYPE

  update(ENV, x, T) = insertIfNew(ENV, x, T, lookupVar(ENV, x)).

  insertIfNew(ENV, x, (T, S), [(_, (x', LT@(T, S')))]) = ENV :-
    @x.ref := x',
    @x.type := LT,
    assignCompat(S', S)
    | error $[Assingment is leaking secure information.].
    
  insertIfNew(ENV, x, LT, []) = ENV' :-
    new ENV',
    ENV' -P-> ENV,
    !var[x, LT] in ENV',
    @x.type := LT.
