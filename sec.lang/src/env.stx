module env

imports
  base

signature
  sorts Env = scope

rules

  lookupVar: Env * Identifier -> VAR_LIST
  get: Env * Identifier -> TYPE
  
  lookupVar(ENV, x) = R :-
    query var 
      filter P*
      and { x' :- x' == x }
      in ENV |-> R.

  get(env, x) = T :- {x'}
    lookupVar(env, x) == [(_, (x', T))],
    @x.ref  := x',
    @x.type := T.

  update: Env * Identifier * TYPE -> Env
  insertIfNew: Env * Identifier * TYPE * VAR_LIST -> Env

  update(ENV, x, T) = insertIfNew(ENV, x, t, lookupVar(env, x)).

  insertIfNew(ENV, _, T, [(_, (_, T))]) = ENV.
  insertIfNew(ENV, x, T, []) = ENV' :-
    new ENV',
    ENV' -P-> ENV,
    !var[x, T] in ENV'.

  insertIfNew(ENV, _, T, [(_, (_, T'))]) = ENV :-
    T != T', // redundant: already implied by rule heads (selection order)
    false.   // undefined
    